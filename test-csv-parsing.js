/**
 * Test espec√≠fico para parsing CSV multiline
 */

const testData = `Nombre,Completado,Persona asignada,Fecha de vencimiento,Proceso,1. ESTADO Firma Cotizaci√≥n,1. Cotizaci√≥n PDF,5. ESTADO Compra Int,5. Doc Compra Int,3. ESTADO Doc Legal General,3. Doc Legales Integra,2. ESTADO factura Cuota Operacional,2. Factura Cuota Operacional,Item ID,6. Link de Cotizaci√≥n,6. GIRO #,7. Estrategia / Intereses,7. ESTADO Estrategia,8. ESTADO Doc Legal X Comp,8. Doc Legal X Comp,9. ESTADO Proforma / Factura final,9. Proforma / Factura final,10. ESTADO Giro Proveedor,10. Swift de Pago Proveedor,14.Monto Pre/Liberaci√≥n,5. Proforma Proveedor,4. Soporte Pago CO Cliente,14. Fecha de Liberaci√≥n,4. ESTADO pago Cuota Operacional,10. Info por GIRO Proveedor,5. Info Gnal + Info Compra Int,6. ESTADO Link Cotizaci√≥n,15. Equipo Comercial,1.Docu. Cliente
<#C095VK2905C|>,FALSE,,,7. Cierre de Operaci√≥n,Listo,F095XLM05T7,Aprobada,F095YQRGZ1Q,Listo,F0960FLAD4L,Listo,F0960FAQQVA,C095VK2905C,"{""originalUrl"":""https:\\/\\/docs.google.com\\/spreadsheets\\/d\\/1vsvadtKRoLe7_XD5T-mJSmElX5cH11h3QXJDKjTlN_s\\/edit?gid=13204065#gid=13204065"",""attachment"":{},""displayAsUrl"":false}",Liberaci√≥n 1,F096MHFPWM6,Listo,Listo,F096MHFPWM6,Listo - Factura Final,F096CFXL6QZ,Listo - Pago Confirmado,F0960L13K5J,30000 USD,F095VNWCH4N,F095XM73EAZ,2025-07-25,Listo,"- VALOR SOLICITADO: 70000
- N√öMERO DE GIRO: 2do Giro a Proveedor
- PORCENTAJE DE GIRO: 70% del total","- CLIENTE: MALE
- PA√çS IMPORTADOR: M√âXICO
- PA√çS EXPORTADOR: CHINA
- VALOR TOTAL DE COMPRA: 80000
- MONEDA DE PAGO SOLICITADO: USD NA
- T√âRMINOS DE PAGO: 30% ADVANCE / 70% AGAINST BL COPY

*******DATOS BANCARIOS*******

- BENEFICIARIO: BANCO BBVA
- BANCO: 4567896
- DIRECCI√ìN: SHANGHAI 10256899 
- N√öMERO DE CUENTA: 46587966666
- SWIFT: BSHANGBB
*************************
- ICOTERM COMPRA: FOB - SHANGHAI
- ICOTERM VENTA: DAP - ZONA FRANCA
- OBSERVACIONES: 
-----------------------
- VALOR SOLICITADO: 20000
- N√öMERO DE GIRO: 1er Giro a Proveedor
- PORCENTAJE DE GIRO: 30% del total
--------------
- VALOR SOLICITADO: 60000
- N√öMERO DE GIRO: 2do Giro a Proveedor
- PORCENTAJE DE GIRO: 70% del total
---------------
- Liberaci√≥n 1
- Capital: 
40000 USD
- Fecha: 2025-07-25
---------------
- Liberaci√≥n 2
- Capital: 
20000 USD
- Fecha: 2025-08-07
---------
- Liberaci√≥n 3
- Capital: 
20000 USD
- Fecha: 2025-09-11
---------
NPS
- Inconvenientes: No
- Descripci√≥n inconvenientes: Acabamos muchisimas gracias a todos!
- Calificaci√≥n (1 mala - 5 buena): 5",Listo,andres.perdomo@finkargo.com,"- CLIENTE: PRUEBA 2
- NIT: 123456789
- VALOR OPERACI√ìN: 80000"`;

function parseCSVLine(line) {
  const values = [];
  let current = '';
  let inQuotes = false;
  let i = 0;

  while (i < line.length) {
    const char = line[i];
    const nextChar = line[i + 1];
    
    if (char === '"') {
      if (inQuotes && nextChar === '"') {
        // Comilla escapada ("" dentro de campo)
        current += '"';
        i += 2;
      } else if (inQuotes && (nextChar === ',' || nextChar === undefined)) {
        // Final de campo quoted
        inQuotes = false;
        i++;
      } else if (!inQuotes && (current === '' || current.trim() === '')) {
        // Inicio de campo quoted (solo si estamos al inicio del campo)
        inQuotes = true;
        i++;
      } else {
        // Comilla literal dentro de contenido
        current += char;
        i++;
      }
    } else if (char === ',' && !inQuotes) {
      // Separador de campo v√°lido
      values.push(current);
      current = '';
      i++;
    } else {
      // Contenido normal (incluye saltos de l√≠nea dentro de quotes)
      current += char;
      i++;
    }
  }
  // Agregar √∫ltimo valor
  values.push(current);
  
  // Limpiar valores: remover comillas externas y espacios solo si son comillas balanceadas
  return values.map(value => {
    if (value.startsWith('"') && value.endsWith('"') && value.length >= 2) {
      const cleaned = value.slice(1, -1);
      return cleaned.replace(/""/g, '"').trim();
    }
    return value.trim();
  });
}

function parseCSVContentRobust(content) {
  const lines = content.split('\n');
  const rows = [];
  
  if (lines.length < 2) {
    throw new Error('Archivo CSV debe tener al menos cabecera y una fila de datos');
  }

  // Extraer cabeceras desde la primera l√≠nea
  const headers = parseCSVLine(lines[0]);
  console.log(`üìã Cabeceras CSV encontradas: ${headers.length} columnas`);

  // Procesar l√≠neas manejando multilinea
  let currentRowText = '';
  let inMultilineField = false;
  let quoteCount = 0;

  for (let i = 1; i < lines.length; i++) {
    const line = lines[i];
    
    // Contar comillas en la l√≠nea actual
    const lineQuotes = (line.match(/"/g) || []).length;
    quoteCount += lineQuotes;
    
    // Agregar l√≠nea al texto actual
    if (currentRowText) {
      currentRowText += '\n' + line;
    } else {
      currentRowText = line;
    }
    
    // Si tenemos un n√∫mero par de comillas, la fila est√° completa
    if (quoteCount % 2 === 0) {
      try {
        const values = parseCSVLine(currentRowText);
        
        // Solo procesar si tenemos al menos algunas columnas
        if (values.length >= Math.floor(headers.length * 0.5)) {
          const row = {};
          headers.forEach((header, index) => {
            row[header] = values[index] || '';
          });
          rows.push(row);
          console.log(`‚úÖ Fila ${i} procesada: ${values.length} columnas`);
        } else {
          console.warn(`‚ö†Ô∏è Fila ${i} descartada: muy pocas columnas (${values.length} vs ${headers.length})`);
        }
      } catch (error) {
        console.error(`‚ùå Error parseando fila ${i}: ${error}`);
      }
      
      // Reset para la siguiente fila
      currentRowText = '';
      quoteCount = 0;
      inMultilineField = false;
    } else {
      inMultilineField = true;
    }
  }
  
  // Si queda contenido sin procesar, intentar parsearlo
  if (currentRowText.trim()) {
    try {
      const values = parseCSVLine(currentRowText);
      if (values.length >= Math.floor(headers.length * 0.5)) {
        const row = {};
        headers.forEach((header, index) => {
          row[header] = values[index] || '';
        });
        rows.push(row);
        console.log(`‚úÖ √öltima fila procesada: ${values.length} columnas`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è √öltima fila incompleta descartada: ${error}`);
    }
  }

  return rows;
}

console.log('üß™ TEST DE PARSING CSV MULTILINE');
console.log('='.repeat(50));

try {
  const rows = parseCSVContentRobust(testData);
  
  console.log(`\nüìä RESULTADO:`);
  console.log(`   Filas parseadas: ${rows.length}`);
  
  if (rows.length > 0) {
    const row = rows[0];
    const keys = Object.keys(row);
    console.log(`   Columnas en fila 1: ${keys.length}`);
    
    // Buscar las columnas importantes
    const infoGnalColumn = row['5. Info Gnal + Info Compra Int'];
    const giroProveedorColumn = row['10. Info por GIRO Proveedor'];
    const docuClienteColumn = row['1.Docu. Cliente'];
    
    console.log(`\nüìÑ CONTENIDOS:`);
    console.log(`   "5. Info Gnal + Info Compra Int" existe: ${!!infoGnalColumn}`);
    if (infoGnalColumn) {
      console.log(`   Longitud: ${infoGnalColumn.length} caracteres`);
      console.log(`   Primeros 200 caracteres: ${infoGnalColumn.substring(0, 200)}...`);
    }
    
    console.log(`   "10. Info por GIRO Proveedor" existe: ${!!giroProveedorColumn}`);
    if (giroProveedorColumn) {
      console.log(`   Contenido: ${giroProveedorColumn}`);
    }
    
    console.log(`   "1.Docu. Cliente" existe: ${!!docuClienteColumn}`);
    if (docuClienteColumn) {
      console.log(`   Contenido: ${docuClienteColumn}`);
    }
    
    // Verificar si contiene datos de giros y liberaciones
    if (infoGnalColumn) {
      const hasGiros = infoGnalColumn.includes('VALOR SOLICITADO') && infoGnalColumn.includes('N√öMERO DE GIRO');
      const hasLiberaciones = infoGnalColumn.includes('Liberaci√≥n') && infoGnalColumn.includes('Capital');
      console.log(`\nüîç AN√ÅLISIS:`);
      console.log(`   Contiene giros: ${hasGiros}`);
      console.log(`   Contiene liberaciones: ${hasLiberaciones}`);
    }
  }
  
} catch (error) {
  console.error('‚ùå Error en test:', error);
}

console.log('\n‚úÖ TEST COMPLETADO');